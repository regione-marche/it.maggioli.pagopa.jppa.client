/*
 * API Gateway Pagamenti
 * Set API REST PagoPA
 *
 * OpenAPI spec version: 1.0
 * Contact: pagamenti.produzione@maggioli.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.RichiestaInfoAvvisoPagamentoPerIuvDto;
import io.swagger.client.model.RichiestaInfoPagamentoDebitoDto;
import io.swagger.client.model.RichiestaInfoPagamentoDovutoDto;
import io.swagger.client.model.RichiestaInfoPagamentoTransazioneDto;
import io.swagger.client.model.RichiestaListaPagamentiDto;
import io.swagger.client.model.RispostaInfoPagamentoDebitoDto;
import io.swagger.client.model.RispostaInfoPagamentoDovutoDto;
import io.swagger.client.model.RispostaInfoPagamentoPerIuvDto;
import io.swagger.client.model.RispostaInfoPagamentoTransazioneDto;
import io.swagger.client.model.RispostaListaPagamentiDto;
import io.swagger.client.model.StandardAPIErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PagamentiApi {
    private ApiClient apiClient;

    public PagamentiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PagamentiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for postInfoPerDebitoUsingPOST
     * @param richiestaInfo richiestaInfo (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postInfoPerDebitoUsingPOSTCall(RichiestaInfoPagamentoDebitoDto richiestaInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = richiestaInfo;

        // create path and map variables
        String localVarPath = "/rest/pagamenti/v1/infoPerDebito";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postInfoPerDebitoUsingPOSTValidateBeforeCall(RichiestaInfoPagamentoDebitoDto richiestaInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'richiestaInfo' is set
        if (richiestaInfo == null) {
            throw new ApiException("Missing the required parameter 'richiestaInfo' when calling postInfoPerDebitoUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = postInfoPerDebitoUsingPOSTCall(richiestaInfo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Servizio che restituisce il dettaglio del pagamento se è stato pagato utilizzando le chiavi del debito come input
     * 
     * @param richiestaInfo richiestaInfo (required)
     * @return RispostaInfoPagamentoDebitoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaInfoPagamentoDebitoDto postInfoPerDebitoUsingPOST(RichiestaInfoPagamentoDebitoDto richiestaInfo) throws ApiException {
        ApiResponse<RispostaInfoPagamentoDebitoDto> resp = postInfoPerDebitoUsingPOSTWithHttpInfo(richiestaInfo);
        return resp.getData();
    }

    /**
     * Servizio che restituisce il dettaglio del pagamento se è stato pagato utilizzando le chiavi del debito come input
     * 
     * @param richiestaInfo richiestaInfo (required)
     * @return ApiResponse&lt;RispostaInfoPagamentoDebitoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaInfoPagamentoDebitoDto> postInfoPerDebitoUsingPOSTWithHttpInfo(RichiestaInfoPagamentoDebitoDto richiestaInfo) throws ApiException {
        com.squareup.okhttp.Call call = postInfoPerDebitoUsingPOSTValidateBeforeCall(richiestaInfo, null, null);
        Type localVarReturnType = new TypeToken<RispostaInfoPagamentoDebitoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Servizio che restituisce il dettaglio del pagamento se è stato pagato utilizzando le chiavi del debito come input (asynchronously)
     * 
     * @param richiestaInfo richiestaInfo (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postInfoPerDebitoUsingPOSTAsync(RichiestaInfoPagamentoDebitoDto richiestaInfo, final ApiCallback<RispostaInfoPagamentoDebitoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postInfoPerDebitoUsingPOSTValidateBeforeCall(richiestaInfo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaInfoPagamentoDebitoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postInfoPerDovutoUsingPOST
     * @param richiestaInfoPagamentoDovutoDto richiestaInfoPagamentoDovutoDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postInfoPerDovutoUsingPOSTCall(RichiestaInfoPagamentoDovutoDto richiestaInfoPagamentoDovutoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = richiestaInfoPagamentoDovutoDto;

        // create path and map variables
        String localVarPath = "/rest/pagamenti/v1/infoPerDovuto";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postInfoPerDovutoUsingPOSTValidateBeforeCall(RichiestaInfoPagamentoDovutoDto richiestaInfoPagamentoDovutoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'richiestaInfoPagamentoDovutoDto' is set
        if (richiestaInfoPagamentoDovutoDto == null) {
            throw new ApiException("Missing the required parameter 'richiestaInfoPagamentoDovutoDto' when calling postInfoPerDovutoUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = postInfoPerDovutoUsingPOSTCall(richiestaInfoPagamentoDovutoDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Servizio che restituisce il dettaglio del pagamento se è stato pagato utilizzando le chiavi del debito come input
     * Ritorna anche il testo della nuova RT (se presente), sia per i debiti monobeneficiario che per i multibeneficiario. Inoltre nel caso ci siano associati dei pagamenti multibeneficiario, c’è un tag aggiuntivo che li descrive e i relativi pagamenti telematici
     * @param richiestaInfoPagamentoDovutoDto richiestaInfoPagamentoDovutoDto (required)
     * @return RispostaInfoPagamentoDovutoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaInfoPagamentoDovutoDto postInfoPerDovutoUsingPOST(RichiestaInfoPagamentoDovutoDto richiestaInfoPagamentoDovutoDto) throws ApiException {
        ApiResponse<RispostaInfoPagamentoDovutoDto> resp = postInfoPerDovutoUsingPOSTWithHttpInfo(richiestaInfoPagamentoDovutoDto);
        return resp.getData();
    }

    /**
     * Servizio che restituisce il dettaglio del pagamento se è stato pagato utilizzando le chiavi del debito come input
     * Ritorna anche il testo della nuova RT (se presente), sia per i debiti monobeneficiario che per i multibeneficiario. Inoltre nel caso ci siano associati dei pagamenti multibeneficiario, c’è un tag aggiuntivo che li descrive e i relativi pagamenti telematici
     * @param richiestaInfoPagamentoDovutoDto richiestaInfoPagamentoDovutoDto (required)
     * @return ApiResponse&lt;RispostaInfoPagamentoDovutoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaInfoPagamentoDovutoDto> postInfoPerDovutoUsingPOSTWithHttpInfo(RichiestaInfoPagamentoDovutoDto richiestaInfoPagamentoDovutoDto) throws ApiException {
        com.squareup.okhttp.Call call = postInfoPerDovutoUsingPOSTValidateBeforeCall(richiestaInfoPagamentoDovutoDto, null, null);
        Type localVarReturnType = new TypeToken<RispostaInfoPagamentoDovutoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Servizio che restituisce il dettaglio del pagamento se è stato pagato utilizzando le chiavi del debito come input (asynchronously)
     * Ritorna anche il testo della nuova RT (se presente), sia per i debiti monobeneficiario che per i multibeneficiario. Inoltre nel caso ci siano associati dei pagamenti multibeneficiario, c’è un tag aggiuntivo che li descrive e i relativi pagamenti telematici
     * @param richiestaInfoPagamentoDovutoDto richiestaInfoPagamentoDovutoDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postInfoPerDovutoUsingPOSTAsync(RichiestaInfoPagamentoDovutoDto richiestaInfoPagamentoDovutoDto, final ApiCallback<RispostaInfoPagamentoDovutoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postInfoPerDovutoUsingPOSTValidateBeforeCall(richiestaInfoPagamentoDovutoDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaInfoPagamentoDovutoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postInfoPerIuvUsingPOST
     * @param richiestaInfoPagamentoDebitoDto richiestaInfoPagamentoDebitoDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postInfoPerIuvUsingPOSTCall(RichiestaInfoAvvisoPagamentoPerIuvDto richiestaInfoPagamentoDebitoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = richiestaInfoPagamentoDebitoDto;

        // create path and map variables
        String localVarPath = "/rest/pagamenti/v1/infoPerIuv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postInfoPerIuvUsingPOSTValidateBeforeCall(RichiestaInfoAvvisoPagamentoPerIuvDto richiestaInfoPagamentoDebitoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'richiestaInfoPagamentoDebitoDto' is set
        if (richiestaInfoPagamentoDebitoDto == null) {
            throw new ApiException("Missing the required parameter 'richiestaInfoPagamentoDebitoDto' when calling postInfoPerIuvUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = postInfoPerIuvUsingPOSTCall(richiestaInfoPagamentoDebitoDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Servizio che permette di ricevere informazioni sui pagamenti attraverso lo IUV in input
     * 
     * @param richiestaInfoPagamentoDebitoDto richiestaInfoPagamentoDebitoDto (required)
     * @return RispostaInfoPagamentoPerIuvDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaInfoPagamentoPerIuvDto postInfoPerIuvUsingPOST(RichiestaInfoAvvisoPagamentoPerIuvDto richiestaInfoPagamentoDebitoDto) throws ApiException {
        ApiResponse<RispostaInfoPagamentoPerIuvDto> resp = postInfoPerIuvUsingPOSTWithHttpInfo(richiestaInfoPagamentoDebitoDto);
        return resp.getData();
    }

    /**
     * Servizio che permette di ricevere informazioni sui pagamenti attraverso lo IUV in input
     * 
     * @param richiestaInfoPagamentoDebitoDto richiestaInfoPagamentoDebitoDto (required)
     * @return ApiResponse&lt;RispostaInfoPagamentoPerIuvDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaInfoPagamentoPerIuvDto> postInfoPerIuvUsingPOSTWithHttpInfo(RichiestaInfoAvvisoPagamentoPerIuvDto richiestaInfoPagamentoDebitoDto) throws ApiException {
        com.squareup.okhttp.Call call = postInfoPerIuvUsingPOSTValidateBeforeCall(richiestaInfoPagamentoDebitoDto, null, null);
        Type localVarReturnType = new TypeToken<RispostaInfoPagamentoPerIuvDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Servizio che permette di ricevere informazioni sui pagamenti attraverso lo IUV in input (asynchronously)
     * 
     * @param richiestaInfoPagamentoDebitoDto richiestaInfoPagamentoDebitoDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postInfoPerIuvUsingPOSTAsync(RichiestaInfoAvvisoPagamentoPerIuvDto richiestaInfoPagamentoDebitoDto, final ApiCallback<RispostaInfoPagamentoPerIuvDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postInfoPerIuvUsingPOSTValidateBeforeCall(richiestaInfoPagamentoDebitoDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaInfoPagamentoPerIuvDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postInfoPerTransazioneUsingPOST
     * @param richiesta richiesta (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postInfoPerTransazioneUsingPOSTCall(RichiestaInfoPagamentoTransazioneDto richiesta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = richiesta;

        // create path and map variables
        String localVarPath = "/rest/pagamenti/v1/infoPerTransazione";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postInfoPerTransazioneUsingPOSTValidateBeforeCall(RichiestaInfoPagamentoTransazioneDto richiesta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'richiesta' is set
        if (richiesta == null) {
            throw new ApiException("Missing the required parameter 'richiesta' when calling postInfoPerTransazioneUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = postInfoPerTransazioneUsingPOSTCall(richiesta, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Servizio che restituisce il dettaglio del pagamento se è stato pagato utilizzando l’idTransazione del pagamento come input
     * 
     * @param richiesta richiesta (required)
     * @return RispostaInfoPagamentoTransazioneDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaInfoPagamentoTransazioneDto postInfoPerTransazioneUsingPOST(RichiestaInfoPagamentoTransazioneDto richiesta) throws ApiException {
        ApiResponse<RispostaInfoPagamentoTransazioneDto> resp = postInfoPerTransazioneUsingPOSTWithHttpInfo(richiesta);
        return resp.getData();
    }

    /**
     * Servizio che restituisce il dettaglio del pagamento se è stato pagato utilizzando l’idTransazione del pagamento come input
     * 
     * @param richiesta richiesta (required)
     * @return ApiResponse&lt;RispostaInfoPagamentoTransazioneDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaInfoPagamentoTransazioneDto> postInfoPerTransazioneUsingPOSTWithHttpInfo(RichiestaInfoPagamentoTransazioneDto richiesta) throws ApiException {
        com.squareup.okhttp.Call call = postInfoPerTransazioneUsingPOSTValidateBeforeCall(richiesta, null, null);
        Type localVarReturnType = new TypeToken<RispostaInfoPagamentoTransazioneDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Servizio che restituisce il dettaglio del pagamento se è stato pagato utilizzando l’idTransazione del pagamento come input (asynchronously)
     * 
     * @param richiesta richiesta (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postInfoPerTransazioneUsingPOSTAsync(RichiestaInfoPagamentoTransazioneDto richiesta, final ApiCallback<RispostaInfoPagamentoTransazioneDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postInfoPerTransazioneUsingPOSTValidateBeforeCall(richiesta, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaInfoPagamentoTransazioneDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postInfoUsingPOST2
     * @param richiestaListaPagamentiDto richiestaListaPagamentiDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postInfoUsingPOST2Call(RichiestaListaPagamentiDto richiestaListaPagamentiDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = richiestaListaPagamentiDto;

        // create path and map variables
        String localVarPath = "/rest/pagamenti/v1/infoPerDate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postInfoUsingPOST2ValidateBeforeCall(RichiestaListaPagamentiDto richiestaListaPagamentiDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'richiestaListaPagamentiDto' is set
        if (richiestaListaPagamentiDto == null) {
            throw new ApiException("Missing the required parameter 'richiestaListaPagamentiDto' when calling postInfoUsingPOST2(Async)");
        }
        

        com.squareup.okhttp.Call call = postInfoUsingPOST2Call(richiestaListaPagamentiDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Servizio che permette il recupero della lista di pagamenti effettuati.
     * Recupera tutti i pagamenti nello stato CONTABILIZZATO o NOTIFICATO con data di creazione del pagamento telematico incluso nelle date, non è la data del pagamento!
     * @param richiestaListaPagamentiDto richiestaListaPagamentiDto (required)
     * @return RispostaListaPagamentiDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaListaPagamentiDto postInfoUsingPOST2(RichiestaListaPagamentiDto richiestaListaPagamentiDto) throws ApiException {
        ApiResponse<RispostaListaPagamentiDto> resp = postInfoUsingPOST2WithHttpInfo(richiestaListaPagamentiDto);
        return resp.getData();
    }

    /**
     * Servizio che permette il recupero della lista di pagamenti effettuati.
     * Recupera tutti i pagamenti nello stato CONTABILIZZATO o NOTIFICATO con data di creazione del pagamento telematico incluso nelle date, non è la data del pagamento!
     * @param richiestaListaPagamentiDto richiestaListaPagamentiDto (required)
     * @return ApiResponse&lt;RispostaListaPagamentiDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaListaPagamentiDto> postInfoUsingPOST2WithHttpInfo(RichiestaListaPagamentiDto richiestaListaPagamentiDto) throws ApiException {
        com.squareup.okhttp.Call call = postInfoUsingPOST2ValidateBeforeCall(richiestaListaPagamentiDto, null, null);
        Type localVarReturnType = new TypeToken<RispostaListaPagamentiDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Servizio che permette il recupero della lista di pagamenti effettuati. (asynchronously)
     * Recupera tutti i pagamenti nello stato CONTABILIZZATO o NOTIFICATO con data di creazione del pagamento telematico incluso nelle date, non è la data del pagamento!
     * @param richiestaListaPagamentiDto richiestaListaPagamentiDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postInfoUsingPOST2Async(RichiestaListaPagamentiDto richiestaListaPagamentiDto, final ApiCallback<RispostaListaPagamentiDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postInfoUsingPOST2ValidateBeforeCall(richiestaListaPagamentiDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaListaPagamentiDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
