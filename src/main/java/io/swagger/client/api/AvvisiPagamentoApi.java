/*
 * API Gateway Pagamenti
 * Set API REST PagoPA
 *
 * OpenAPI spec version: 1.0
 * Contact: pagamenti.produzione@maggioli.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.RichiestaAttivaAvvisiPagamentoDto;
import io.swagger.client.model.RichiestaAttivaAvvisiPagamentoPerIdLottoDto;
import io.swagger.client.model.RichiestaCreaAvvisiPagamentoDto;
import io.swagger.client.model.RichiestaCreaAvvisoPagamentoDto;
import io.swagger.client.model.RichiestaEliminaAvvisoPagamentoDto;
import io.swagger.client.model.RichiestaInfoAvvisiPagamentoDto;
import io.swagger.client.model.RichiestaInfoAvvisoPagamentoPerChiaveDebitoDto;
import io.swagger.client.model.RichiestaInfoAvvisoPagamentoPerNumeroAvvisoDto;
import io.swagger.client.model.RichiestaModificaCausaleDto;
import io.swagger.client.model.RichiestaModificaContribuenteDto;
import io.swagger.client.model.RichiestaModificaImportoDto;
import io.swagger.client.model.RichiestaSostituisciAvvisoPagamentoDto;
import io.swagger.client.model.RispostaAttivaAvvisiPagamentoDto;
import io.swagger.client.model.RispostaAttivaAvvisiPagamentoPerIdLottoDto;
import io.swagger.client.model.RispostaCreaAvvisiPagamentoDto;
import io.swagger.client.model.RispostaCreaAvvisoPagamentoDto;
import io.swagger.client.model.RispostaEliminaAvvisoPagamentoDto;
import io.swagger.client.model.RispostaInfoAvvisiPagamentoDto;
import io.swagger.client.model.RispostaInfoAvvisoPagamentoPerChiaveDebitoDto;
import io.swagger.client.model.RispostaInfoAvvisoPagamentoPerNumeroAvvisoDto;
import io.swagger.client.model.RispostaModificaCausaleDto;
import io.swagger.client.model.RispostaModificaContribuenteDto;
import io.swagger.client.model.RispostaModificaImportoDto;
import io.swagger.client.model.RispostaSostituisciAvvisoPagamentoDto;
import io.swagger.client.model.StandardAPIErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AvvisiPagamentoApi {
    private ApiClient apiClient;

    public AvvisiPagamentoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AvvisiPagamentoApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteEliminaUsingDELETE
     * @param eliminaAvvisoPagamentoDto eliminaAvvisoPagamentoDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEliminaUsingDELETECall(RichiestaEliminaAvvisoPagamentoDto eliminaAvvisoPagamentoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eliminaAvvisoPagamentoDto;

        // create path and map variables
        String localVarPath = "/rest/avvisiPagamento/v1/elimina";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEliminaUsingDELETEValidateBeforeCall(RichiestaEliminaAvvisoPagamentoDto eliminaAvvisoPagamentoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eliminaAvvisoPagamentoDto' is set
        if (eliminaAvvisoPagamentoDto == null) {
            throw new ApiException("Missing the required parameter 'eliminaAvvisoPagamentoDto' when calling deleteEliminaUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEliminaUsingDELETECall(eliminaAvvisoPagamentoDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Servizio che permette la cancellazione logica di un avviso
     * 
     * @param eliminaAvvisoPagamentoDto eliminaAvvisoPagamentoDto (required)
     * @return RispostaEliminaAvvisoPagamentoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaEliminaAvvisoPagamentoDto deleteEliminaUsingDELETE(RichiestaEliminaAvvisoPagamentoDto eliminaAvvisoPagamentoDto) throws ApiException {
        ApiResponse<RispostaEliminaAvvisoPagamentoDto> resp = deleteEliminaUsingDELETEWithHttpInfo(eliminaAvvisoPagamentoDto);
        return resp.getData();
    }

    /**
     * Servizio che permette la cancellazione logica di un avviso
     * 
     * @param eliminaAvvisoPagamentoDto eliminaAvvisoPagamentoDto (required)
     * @return ApiResponse&lt;RispostaEliminaAvvisoPagamentoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaEliminaAvvisoPagamentoDto> deleteEliminaUsingDELETEWithHttpInfo(RichiestaEliminaAvvisoPagamentoDto eliminaAvvisoPagamentoDto) throws ApiException {
        com.squareup.okhttp.Call call = deleteEliminaUsingDELETEValidateBeforeCall(eliminaAvvisoPagamentoDto, null, null);
        Type localVarReturnType = new TypeToken<RispostaEliminaAvvisoPagamentoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Servizio che permette la cancellazione logica di un avviso (asynchronously)
     * 
     * @param eliminaAvvisoPagamentoDto eliminaAvvisoPagamentoDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEliminaUsingDELETEAsync(RichiestaEliminaAvvisoPagamentoDto eliminaAvvisoPagamentoDto, final ApiCallback<RispostaEliminaAvvisoPagamentoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEliminaUsingDELETEValidateBeforeCall(eliminaAvvisoPagamentoDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaEliminaAvvisoPagamentoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchModificaCausaleUsingPATCH
     * @param modificaCausaleDto modificaCausaleDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchModificaCausaleUsingPATCHCall(RichiestaModificaCausaleDto modificaCausaleDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = modificaCausaleDto;

        // create path and map variables
        String localVarPath = "/rest/avvisiPagamento/v1/modificaCausale";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchModificaCausaleUsingPATCHValidateBeforeCall(RichiestaModificaCausaleDto modificaCausaleDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modificaCausaleDto' is set
        if (modificaCausaleDto == null) {
            throw new ApiException("Missing the required parameter 'modificaCausaleDto' when calling patchModificaCausaleUsingPATCH(Async)");
        }
        

        com.squareup.okhttp.Call call = patchModificaCausaleUsingPATCHCall(modificaCausaleDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Servizio che permette la modifica della causale di un avviso (attivo)
     * 
     * @param modificaCausaleDto modificaCausaleDto (required)
     * @return RispostaModificaCausaleDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaModificaCausaleDto patchModificaCausaleUsingPATCH(RichiestaModificaCausaleDto modificaCausaleDto) throws ApiException {
        ApiResponse<RispostaModificaCausaleDto> resp = patchModificaCausaleUsingPATCHWithHttpInfo(modificaCausaleDto);
        return resp.getData();
    }

    /**
     * Servizio che permette la modifica della causale di un avviso (attivo)
     * 
     * @param modificaCausaleDto modificaCausaleDto (required)
     * @return ApiResponse&lt;RispostaModificaCausaleDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaModificaCausaleDto> patchModificaCausaleUsingPATCHWithHttpInfo(RichiestaModificaCausaleDto modificaCausaleDto) throws ApiException {
        com.squareup.okhttp.Call call = patchModificaCausaleUsingPATCHValidateBeforeCall(modificaCausaleDto, null, null);
        Type localVarReturnType = new TypeToken<RispostaModificaCausaleDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Servizio che permette la modifica della causale di un avviso (attivo) (asynchronously)
     * 
     * @param modificaCausaleDto modificaCausaleDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchModificaCausaleUsingPATCHAsync(RichiestaModificaCausaleDto modificaCausaleDto, final ApiCallback<RispostaModificaCausaleDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchModificaCausaleUsingPATCHValidateBeforeCall(modificaCausaleDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaModificaCausaleDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchModificaContribuenteUsingPATCH
     * @param modificaContribuenteDto modificaContribuenteDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchModificaContribuenteUsingPATCHCall(RichiestaModificaContribuenteDto modificaContribuenteDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = modificaContribuenteDto;

        // create path and map variables
        String localVarPath = "/rest/avvisiPagamento/v1/modificaContribuente";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchModificaContribuenteUsingPATCHValidateBeforeCall(RichiestaModificaContribuenteDto modificaContribuenteDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modificaContribuenteDto' is set
        if (modificaContribuenteDto == null) {
            throw new ApiException("Missing the required parameter 'modificaContribuenteDto' when calling patchModificaContribuenteUsingPATCH(Async)");
        }
        

        com.squareup.okhttp.Call call = patchModificaContribuenteUsingPATCHCall(modificaContribuenteDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Servizio che permette la modifica del contribuente di un avviso (attivo)
     * 
     * @param modificaContribuenteDto modificaContribuenteDto (required)
     * @return RispostaModificaContribuenteDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaModificaContribuenteDto patchModificaContribuenteUsingPATCH(RichiestaModificaContribuenteDto modificaContribuenteDto) throws ApiException {
        ApiResponse<RispostaModificaContribuenteDto> resp = patchModificaContribuenteUsingPATCHWithHttpInfo(modificaContribuenteDto);
        return resp.getData();
    }

    /**
     * Servizio che permette la modifica del contribuente di un avviso (attivo)
     * 
     * @param modificaContribuenteDto modificaContribuenteDto (required)
     * @return ApiResponse&lt;RispostaModificaContribuenteDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaModificaContribuenteDto> patchModificaContribuenteUsingPATCHWithHttpInfo(RichiestaModificaContribuenteDto modificaContribuenteDto) throws ApiException {
        com.squareup.okhttp.Call call = patchModificaContribuenteUsingPATCHValidateBeforeCall(modificaContribuenteDto, null, null);
        Type localVarReturnType = new TypeToken<RispostaModificaContribuenteDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Servizio che permette la modifica del contribuente di un avviso (attivo) (asynchronously)
     * 
     * @param modificaContribuenteDto modificaContribuenteDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchModificaContribuenteUsingPATCHAsync(RichiestaModificaContribuenteDto modificaContribuenteDto, final ApiCallback<RispostaModificaContribuenteDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchModificaContribuenteUsingPATCHValidateBeforeCall(modificaContribuenteDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaModificaContribuenteDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchModificaImportoUsingPATCH
     * @param modificaImportoDto modificaImportoDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchModificaImportoUsingPATCHCall(RichiestaModificaImportoDto modificaImportoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = modificaImportoDto;

        // create path and map variables
        String localVarPath = "/rest/avvisiPagamento/v1/modificaImporto";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchModificaImportoUsingPATCHValidateBeforeCall(RichiestaModificaImportoDto modificaImportoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modificaImportoDto' is set
        if (modificaImportoDto == null) {
            throw new ApiException("Missing the required parameter 'modificaImportoDto' when calling patchModificaImportoUsingPATCH(Async)");
        }
        

        com.squareup.okhttp.Call call = patchModificaImportoUsingPATCHCall(modificaImportoDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Permette la modifica dell&#39;importo di un avviso (attivo)
     * 
     * @param modificaImportoDto modificaImportoDto (required)
     * @return RispostaModificaImportoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaModificaImportoDto patchModificaImportoUsingPATCH(RichiestaModificaImportoDto modificaImportoDto) throws ApiException {
        ApiResponse<RispostaModificaImportoDto> resp = patchModificaImportoUsingPATCHWithHttpInfo(modificaImportoDto);
        return resp.getData();
    }

    /**
     * Permette la modifica dell&#39;importo di un avviso (attivo)
     * 
     * @param modificaImportoDto modificaImportoDto (required)
     * @return ApiResponse&lt;RispostaModificaImportoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaModificaImportoDto> patchModificaImportoUsingPATCHWithHttpInfo(RichiestaModificaImportoDto modificaImportoDto) throws ApiException {
        com.squareup.okhttp.Call call = patchModificaImportoUsingPATCHValidateBeforeCall(modificaImportoDto, null, null);
        Type localVarReturnType = new TypeToken<RispostaModificaImportoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Permette la modifica dell&#39;importo di un avviso (attivo) (asynchronously)
     * 
     * @param modificaImportoDto modificaImportoDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchModificaImportoUsingPATCHAsync(RichiestaModificaImportoDto modificaImportoDto, final ApiCallback<RispostaModificaImportoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchModificaImportoUsingPATCHValidateBeforeCall(modificaImportoDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaModificaImportoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAttivaPerIdLottoUsingPATCH
     * @param attivaAvvisiPagamentoDto attivaAvvisiPagamentoDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAttivaPerIdLottoUsingPATCHCall(RichiestaAttivaAvvisiPagamentoPerIdLottoDto attivaAvvisiPagamentoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = attivaAvvisiPagamentoDto;

        // create path and map variables
        String localVarPath = "/rest/avvisiPagamento/v1/attivaPerIdLotto";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAttivaPerIdLottoUsingPATCHValidateBeforeCall(RichiestaAttivaAvvisiPagamentoPerIdLottoDto attivaAvvisiPagamentoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'attivaAvvisiPagamentoDto' is set
        if (attivaAvvisiPagamentoDto == null) {
            throw new ApiException("Missing the required parameter 'attivaAvvisiPagamentoDto' when calling postAttivaPerIdLottoUsingPATCH(Async)");
        }
        

        com.squareup.okhttp.Call call = postAttivaPerIdLottoUsingPATCHCall(attivaAvvisiPagamentoDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Permette l&#39;attivazione di un avviso di pagamento attraverso l&#39;id lotto
     * 
     * @param attivaAvvisiPagamentoDto attivaAvvisiPagamentoDto (required)
     * @return RispostaAttivaAvvisiPagamentoPerIdLottoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaAttivaAvvisiPagamentoPerIdLottoDto postAttivaPerIdLottoUsingPATCH(RichiestaAttivaAvvisiPagamentoPerIdLottoDto attivaAvvisiPagamentoDto) throws ApiException {
        ApiResponse<RispostaAttivaAvvisiPagamentoPerIdLottoDto> resp = postAttivaPerIdLottoUsingPATCHWithHttpInfo(attivaAvvisiPagamentoDto);
        return resp.getData();
    }

    /**
     * Permette l&#39;attivazione di un avviso di pagamento attraverso l&#39;id lotto
     * 
     * @param attivaAvvisiPagamentoDto attivaAvvisiPagamentoDto (required)
     * @return ApiResponse&lt;RispostaAttivaAvvisiPagamentoPerIdLottoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaAttivaAvvisiPagamentoPerIdLottoDto> postAttivaPerIdLottoUsingPATCHWithHttpInfo(RichiestaAttivaAvvisiPagamentoPerIdLottoDto attivaAvvisiPagamentoDto) throws ApiException {
        com.squareup.okhttp.Call call = postAttivaPerIdLottoUsingPATCHValidateBeforeCall(attivaAvvisiPagamentoDto, null, null);
        Type localVarReturnType = new TypeToken<RispostaAttivaAvvisiPagamentoPerIdLottoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Permette l&#39;attivazione di un avviso di pagamento attraverso l&#39;id lotto (asynchronously)
     * 
     * @param attivaAvvisiPagamentoDto attivaAvvisiPagamentoDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAttivaPerIdLottoUsingPATCHAsync(RichiestaAttivaAvvisiPagamentoPerIdLottoDto attivaAvvisiPagamentoDto, final ApiCallback<RispostaAttivaAvvisiPagamentoPerIdLottoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAttivaPerIdLottoUsingPATCHValidateBeforeCall(attivaAvvisiPagamentoDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaAttivaAvvisiPagamentoPerIdLottoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAttivaUsingPATCH
     * @param attivaAvvisiPagamentoDto attivaAvvisiPagamentoDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAttivaUsingPATCHCall(RichiestaAttivaAvvisiPagamentoDto attivaAvvisiPagamentoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = attivaAvvisiPagamentoDto;

        // create path and map variables
        String localVarPath = "/rest/avvisiPagamento/v1/attiva";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAttivaUsingPATCHValidateBeforeCall(RichiestaAttivaAvvisiPagamentoDto attivaAvvisiPagamentoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'attivaAvvisiPagamentoDto' is set
        if (attivaAvvisiPagamentoDto == null) {
            throw new ApiException("Missing the required parameter 'attivaAvvisiPagamentoDto' when calling postAttivaUsingPATCH(Async)");
        }
        

        com.squareup.okhttp.Call call = postAttivaUsingPATCHCall(attivaAvvisiPagamentoDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Permette l&#39;attivazione di un avviso di pagamento
     * Funziona solo in attivazione
     * @param attivaAvvisiPagamentoDto attivaAvvisiPagamentoDto (required)
     * @return RispostaAttivaAvvisiPagamentoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaAttivaAvvisiPagamentoDto postAttivaUsingPATCH(RichiestaAttivaAvvisiPagamentoDto attivaAvvisiPagamentoDto) throws ApiException {
        ApiResponse<RispostaAttivaAvvisiPagamentoDto> resp = postAttivaUsingPATCHWithHttpInfo(attivaAvvisiPagamentoDto);
        return resp.getData();
    }

    /**
     * Permette l&#39;attivazione di un avviso di pagamento
     * Funziona solo in attivazione
     * @param attivaAvvisiPagamentoDto attivaAvvisiPagamentoDto (required)
     * @return ApiResponse&lt;RispostaAttivaAvvisiPagamentoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaAttivaAvvisiPagamentoDto> postAttivaUsingPATCHWithHttpInfo(RichiestaAttivaAvvisiPagamentoDto attivaAvvisiPagamentoDto) throws ApiException {
        com.squareup.okhttp.Call call = postAttivaUsingPATCHValidateBeforeCall(attivaAvvisiPagamentoDto, null, null);
        Type localVarReturnType = new TypeToken<RispostaAttivaAvvisiPagamentoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Permette l&#39;attivazione di un avviso di pagamento (asynchronously)
     * Funziona solo in attivazione
     * @param attivaAvvisiPagamentoDto attivaAvvisiPagamentoDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAttivaUsingPATCHAsync(RichiestaAttivaAvvisiPagamentoDto attivaAvvisiPagamentoDto, final ApiCallback<RispostaAttivaAvvisiPagamentoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAttivaUsingPATCHValidateBeforeCall(attivaAvvisiPagamentoDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaAttivaAvvisiPagamentoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postCreaMultipliUsingPOST
     * @param creaAvvisiPagamentoDto creaAvvisiPagamentoDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postCreaMultipliUsingPOSTCall(RichiestaCreaAvvisiPagamentoDto creaAvvisiPagamentoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = creaAvvisiPagamentoDto;

        // create path and map variables
        String localVarPath = "/rest/avvisiPagamento/v1/creaMultipli";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postCreaMultipliUsingPOSTValidateBeforeCall(RichiestaCreaAvvisiPagamentoDto creaAvvisiPagamentoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'creaAvvisiPagamentoDto' is set
        if (creaAvvisiPagamentoDto == null) {
            throw new ApiException("Missing the required parameter 'creaAvvisiPagamentoDto' when calling postCreaMultipliUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = postCreaMultipliUsingPOSTCall(creaAvvisiPagamentoDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Permette la creazione di più avvisi di pagamento
     * 
     * @param creaAvvisiPagamentoDto creaAvvisiPagamentoDto (required)
     * @return RispostaCreaAvvisiPagamentoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaCreaAvvisiPagamentoDto postCreaMultipliUsingPOST(RichiestaCreaAvvisiPagamentoDto creaAvvisiPagamentoDto) throws ApiException {
        ApiResponse<RispostaCreaAvvisiPagamentoDto> resp = postCreaMultipliUsingPOSTWithHttpInfo(creaAvvisiPagamentoDto);
        return resp.getData();
    }

    /**
     * Permette la creazione di più avvisi di pagamento
     * 
     * @param creaAvvisiPagamentoDto creaAvvisiPagamentoDto (required)
     * @return ApiResponse&lt;RispostaCreaAvvisiPagamentoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaCreaAvvisiPagamentoDto> postCreaMultipliUsingPOSTWithHttpInfo(RichiestaCreaAvvisiPagamentoDto creaAvvisiPagamentoDto) throws ApiException {
        com.squareup.okhttp.Call call = postCreaMultipliUsingPOSTValidateBeforeCall(creaAvvisiPagamentoDto, null, null);
        Type localVarReturnType = new TypeToken<RispostaCreaAvvisiPagamentoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Permette la creazione di più avvisi di pagamento (asynchronously)
     * 
     * @param creaAvvisiPagamentoDto creaAvvisiPagamentoDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postCreaMultipliUsingPOSTAsync(RichiestaCreaAvvisiPagamentoDto creaAvvisiPagamentoDto, final ApiCallback<RispostaCreaAvvisiPagamentoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postCreaMultipliUsingPOSTValidateBeforeCall(creaAvvisiPagamentoDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaCreaAvvisiPagamentoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postCreaUsingPOST
     * @param creaAvvisoPagamentoDto creaAvvisoPagamentoDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postCreaUsingPOSTCall(RichiestaCreaAvvisoPagamentoDto creaAvvisoPagamentoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = creaAvvisoPagamentoDto;

        // create path and map variables
        String localVarPath = "/rest/avvisiPagamento/v1/crea";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postCreaUsingPOSTValidateBeforeCall(RichiestaCreaAvvisoPagamentoDto creaAvvisoPagamentoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'creaAvvisoPagamentoDto' is set
        if (creaAvvisoPagamentoDto == null) {
            throw new ApiException("Missing the required parameter 'creaAvvisoPagamentoDto' when calling postCreaUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = postCreaUsingPOSTCall(creaAvvisoPagamentoDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Permette la creazione di un avviso di pagamento
     * 
     * @param creaAvvisoPagamentoDto creaAvvisoPagamentoDto (required)
     * @return RispostaCreaAvvisoPagamentoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaCreaAvvisoPagamentoDto postCreaUsingPOST(RichiestaCreaAvvisoPagamentoDto creaAvvisoPagamentoDto) throws ApiException {
        ApiResponse<RispostaCreaAvvisoPagamentoDto> resp = postCreaUsingPOSTWithHttpInfo(creaAvvisoPagamentoDto);
        return resp.getData();
    }

    /**
     * Permette la creazione di un avviso di pagamento
     * 
     * @param creaAvvisoPagamentoDto creaAvvisoPagamentoDto (required)
     * @return ApiResponse&lt;RispostaCreaAvvisoPagamentoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaCreaAvvisoPagamentoDto> postCreaUsingPOSTWithHttpInfo(RichiestaCreaAvvisoPagamentoDto creaAvvisoPagamentoDto) throws ApiException {
        com.squareup.okhttp.Call call = postCreaUsingPOSTValidateBeforeCall(creaAvvisoPagamentoDto, null, null);
        Type localVarReturnType = new TypeToken<RispostaCreaAvvisoPagamentoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Permette la creazione di un avviso di pagamento (asynchronously)
     * 
     * @param creaAvvisoPagamentoDto creaAvvisoPagamentoDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postCreaUsingPOSTAsync(RichiestaCreaAvvisoPagamentoDto creaAvvisoPagamentoDto, final ApiCallback<RispostaCreaAvvisoPagamentoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postCreaUsingPOSTValidateBeforeCall(creaAvvisoPagamentoDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaCreaAvvisoPagamentoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postInfoPerChiaveDebitoUsingPOST
     * @param infoAvvisiPagamentoPerChiaveDebito infoAvvisiPagamentoPerChiaveDebito (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postInfoPerChiaveDebitoUsingPOSTCall(RichiestaInfoAvvisoPagamentoPerChiaveDebitoDto infoAvvisiPagamentoPerChiaveDebito, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = infoAvvisiPagamentoPerChiaveDebito;

        // create path and map variables
        String localVarPath = "/rest/avvisiPagamento/v1/infoPerChiaveDebito";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postInfoPerChiaveDebitoUsingPOSTValidateBeforeCall(RichiestaInfoAvvisoPagamentoPerChiaveDebitoDto infoAvvisiPagamentoPerChiaveDebito, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'infoAvvisiPagamentoPerChiaveDebito' is set
        if (infoAvvisiPagamentoPerChiaveDebito == null) {
            throw new ApiException("Missing the required parameter 'infoAvvisiPagamentoPerChiaveDebito' when calling postInfoPerChiaveDebitoUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = postInfoPerChiaveDebitoUsingPOSTCall(infoAvvisiPagamentoPerChiaveDebito, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Servizio che restituisce il dettaglio del debito tramite la chiave del debito
     * 
     * @param infoAvvisiPagamentoPerChiaveDebito infoAvvisiPagamentoPerChiaveDebito (required)
     * @return RispostaInfoAvvisoPagamentoPerChiaveDebitoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaInfoAvvisoPagamentoPerChiaveDebitoDto postInfoPerChiaveDebitoUsingPOST(RichiestaInfoAvvisoPagamentoPerChiaveDebitoDto infoAvvisiPagamentoPerChiaveDebito) throws ApiException {
        ApiResponse<RispostaInfoAvvisoPagamentoPerChiaveDebitoDto> resp = postInfoPerChiaveDebitoUsingPOSTWithHttpInfo(infoAvvisiPagamentoPerChiaveDebito);
        return resp.getData();
    }

    /**
     * Servizio che restituisce il dettaglio del debito tramite la chiave del debito
     * 
     * @param infoAvvisiPagamentoPerChiaveDebito infoAvvisiPagamentoPerChiaveDebito (required)
     * @return ApiResponse&lt;RispostaInfoAvvisoPagamentoPerChiaveDebitoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaInfoAvvisoPagamentoPerChiaveDebitoDto> postInfoPerChiaveDebitoUsingPOSTWithHttpInfo(RichiestaInfoAvvisoPagamentoPerChiaveDebitoDto infoAvvisiPagamentoPerChiaveDebito) throws ApiException {
        com.squareup.okhttp.Call call = postInfoPerChiaveDebitoUsingPOSTValidateBeforeCall(infoAvvisiPagamentoPerChiaveDebito, null, null);
        Type localVarReturnType = new TypeToken<RispostaInfoAvvisoPagamentoPerChiaveDebitoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Servizio che restituisce il dettaglio del debito tramite la chiave del debito (asynchronously)
     * 
     * @param infoAvvisiPagamentoPerChiaveDebito infoAvvisiPagamentoPerChiaveDebito (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postInfoPerChiaveDebitoUsingPOSTAsync(RichiestaInfoAvvisoPagamentoPerChiaveDebitoDto infoAvvisiPagamentoPerChiaveDebito, final ApiCallback<RispostaInfoAvvisoPagamentoPerChiaveDebitoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postInfoPerChiaveDebitoUsingPOSTValidateBeforeCall(infoAvvisiPagamentoPerChiaveDebito, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaInfoAvvisoPagamentoPerChiaveDebitoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postInfoPerNumeroAvvisoUsingPOST
     * @param infoAvvisiPagamentoPerNumeroAvviso infoAvvisiPagamentoPerNumeroAvviso (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postInfoPerNumeroAvvisoUsingPOSTCall(RichiestaInfoAvvisoPagamentoPerNumeroAvvisoDto infoAvvisiPagamentoPerNumeroAvviso, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = infoAvvisiPagamentoPerNumeroAvviso;

        // create path and map variables
        String localVarPath = "/rest/avvisiPagamento/v1/infoPerNumeroAvviso";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postInfoPerNumeroAvvisoUsingPOSTValidateBeforeCall(RichiestaInfoAvvisoPagamentoPerNumeroAvvisoDto infoAvvisiPagamentoPerNumeroAvviso, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'infoAvvisiPagamentoPerNumeroAvviso' is set
        if (infoAvvisiPagamentoPerNumeroAvviso == null) {
            throw new ApiException("Missing the required parameter 'infoAvvisiPagamentoPerNumeroAvviso' when calling postInfoPerNumeroAvvisoUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = postInfoPerNumeroAvvisoUsingPOSTCall(infoAvvisiPagamentoPerNumeroAvviso, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Servizio che restituisce il dettaglio del debito tramite NumeroAvviso
     * 
     * @param infoAvvisiPagamentoPerNumeroAvviso infoAvvisiPagamentoPerNumeroAvviso (required)
     * @return RispostaInfoAvvisoPagamentoPerNumeroAvvisoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaInfoAvvisoPagamentoPerNumeroAvvisoDto postInfoPerNumeroAvvisoUsingPOST(RichiestaInfoAvvisoPagamentoPerNumeroAvvisoDto infoAvvisiPagamentoPerNumeroAvviso) throws ApiException {
        ApiResponse<RispostaInfoAvvisoPagamentoPerNumeroAvvisoDto> resp = postInfoPerNumeroAvvisoUsingPOSTWithHttpInfo(infoAvvisiPagamentoPerNumeroAvviso);
        return resp.getData();
    }

    /**
     * Servizio che restituisce il dettaglio del debito tramite NumeroAvviso
     * 
     * @param infoAvvisiPagamentoPerNumeroAvviso infoAvvisiPagamentoPerNumeroAvviso (required)
     * @return ApiResponse&lt;RispostaInfoAvvisoPagamentoPerNumeroAvvisoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaInfoAvvisoPagamentoPerNumeroAvvisoDto> postInfoPerNumeroAvvisoUsingPOSTWithHttpInfo(RichiestaInfoAvvisoPagamentoPerNumeroAvvisoDto infoAvvisiPagamentoPerNumeroAvviso) throws ApiException {
        com.squareup.okhttp.Call call = postInfoPerNumeroAvvisoUsingPOSTValidateBeforeCall(infoAvvisiPagamentoPerNumeroAvviso, null, null);
        Type localVarReturnType = new TypeToken<RispostaInfoAvvisoPagamentoPerNumeroAvvisoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Servizio che restituisce il dettaglio del debito tramite NumeroAvviso (asynchronously)
     * 
     * @param infoAvvisiPagamentoPerNumeroAvviso infoAvvisiPagamentoPerNumeroAvviso (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postInfoPerNumeroAvvisoUsingPOSTAsync(RichiestaInfoAvvisoPagamentoPerNumeroAvvisoDto infoAvvisiPagamentoPerNumeroAvviso, final ApiCallback<RispostaInfoAvvisoPagamentoPerNumeroAvvisoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postInfoPerNumeroAvvisoUsingPOSTValidateBeforeCall(infoAvvisiPagamentoPerNumeroAvviso, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaInfoAvvisoPagamentoPerNumeroAvvisoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postInfoUsingPOST
     * @param infoAvvisiPagamento infoAvvisiPagamento (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postInfoUsingPOSTCall(RichiestaInfoAvvisiPagamentoDto infoAvvisiPagamento, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = infoAvvisiPagamento;

        // create path and map variables
        String localVarPath = "/rest/avvisiPagamento/v1/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postInfoUsingPOSTValidateBeforeCall(RichiestaInfoAvvisiPagamentoDto infoAvvisiPagamento, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'infoAvvisiPagamento' is set
        if (infoAvvisiPagamento == null) {
            throw new ApiException("Missing the required parameter 'infoAvvisiPagamento' when calling postInfoUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = postInfoUsingPOSTCall(infoAvvisiPagamento, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Servizio che restituisce la lista di pagamenti mod 3 che rispettano diversi criteri di ricerca (tipo debito, date, flag vari ecc.)
     * 
     * @param infoAvvisiPagamento infoAvvisiPagamento (required)
     * @return RispostaInfoAvvisiPagamentoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaInfoAvvisiPagamentoDto postInfoUsingPOST(RichiestaInfoAvvisiPagamentoDto infoAvvisiPagamento) throws ApiException {
        ApiResponse<RispostaInfoAvvisiPagamentoDto> resp = postInfoUsingPOSTWithHttpInfo(infoAvvisiPagamento);
        return resp.getData();
    }

    /**
     * Servizio che restituisce la lista di pagamenti mod 3 che rispettano diversi criteri di ricerca (tipo debito, date, flag vari ecc.)
     * 
     * @param infoAvvisiPagamento infoAvvisiPagamento (required)
     * @return ApiResponse&lt;RispostaInfoAvvisiPagamentoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaInfoAvvisiPagamentoDto> postInfoUsingPOSTWithHttpInfo(RichiestaInfoAvvisiPagamentoDto infoAvvisiPagamento) throws ApiException {
        com.squareup.okhttp.Call call = postInfoUsingPOSTValidateBeforeCall(infoAvvisiPagamento, null, null);
        Type localVarReturnType = new TypeToken<RispostaInfoAvvisiPagamentoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Servizio che restituisce la lista di pagamenti mod 3 che rispettano diversi criteri di ricerca (tipo debito, date, flag vari ecc.) (asynchronously)
     * 
     * @param infoAvvisiPagamento infoAvvisiPagamento (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postInfoUsingPOSTAsync(RichiestaInfoAvvisiPagamentoDto infoAvvisiPagamento, final ApiCallback<RispostaInfoAvvisiPagamentoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postInfoUsingPOSTValidateBeforeCall(infoAvvisiPagamento, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaInfoAvvisiPagamentoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postSostituisciUsingPUT
     * @param sostituisciAvvisoPagamentoDto sostituisciAvvisoPagamentoDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postSostituisciUsingPUTCall(RichiestaSostituisciAvvisoPagamentoDto sostituisciAvvisoPagamentoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sostituisciAvvisoPagamentoDto;

        // create path and map variables
        String localVarPath = "/rest/avvisiPagamento/v1/sostituisci";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSostituisciUsingPUTValidateBeforeCall(RichiestaSostituisciAvvisoPagamentoDto sostituisciAvvisoPagamentoDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sostituisciAvvisoPagamentoDto' is set
        if (sostituisciAvvisoPagamentoDto == null) {
            throw new ApiException("Missing the required parameter 'sostituisciAvvisoPagamentoDto' when calling postSostituisciUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = postSostituisciUsingPUTCall(sostituisciAvvisoPagamentoDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Servizio che permette la sostituzione di un avviso (attivo).
     * 
     * @param sostituisciAvvisoPagamentoDto sostituisciAvvisoPagamentoDto (required)
     * @return RispostaSostituisciAvvisoPagamentoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaSostituisciAvvisoPagamentoDto postSostituisciUsingPUT(RichiestaSostituisciAvvisoPagamentoDto sostituisciAvvisoPagamentoDto) throws ApiException {
        ApiResponse<RispostaSostituisciAvvisoPagamentoDto> resp = postSostituisciUsingPUTWithHttpInfo(sostituisciAvvisoPagamentoDto);
        return resp.getData();
    }

    /**
     * Servizio che permette la sostituzione di un avviso (attivo).
     * 
     * @param sostituisciAvvisoPagamentoDto sostituisciAvvisoPagamentoDto (required)
     * @return ApiResponse&lt;RispostaSostituisciAvvisoPagamentoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaSostituisciAvvisoPagamentoDto> postSostituisciUsingPUTWithHttpInfo(RichiestaSostituisciAvvisoPagamentoDto sostituisciAvvisoPagamentoDto) throws ApiException {
        com.squareup.okhttp.Call call = postSostituisciUsingPUTValidateBeforeCall(sostituisciAvvisoPagamentoDto, null, null);
        Type localVarReturnType = new TypeToken<RispostaSostituisciAvvisoPagamentoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Servizio che permette la sostituzione di un avviso (attivo). (asynchronously)
     * 
     * @param sostituisciAvvisoPagamentoDto sostituisciAvvisoPagamentoDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postSostituisciUsingPUTAsync(RichiestaSostituisciAvvisoPagamentoDto sostituisciAvvisoPagamentoDto, final ApiCallback<RispostaSostituisciAvvisoPagamentoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSostituisciUsingPUTValidateBeforeCall(sostituisciAvvisoPagamentoDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaSostituisciAvvisoPagamentoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
