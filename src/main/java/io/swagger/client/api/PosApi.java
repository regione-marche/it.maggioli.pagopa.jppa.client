/*
 * API Gateway Pagamenti
 * Set API REST PagoPA
 *
 * OpenAPI spec version: 1.0
 * Contact: pagamenti.produzione@maggioli.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.RichiestaInfoAvvisoPagamentoPerIdPosDto;
import io.swagger.client.model.RichiestaListaTerminaliPOSDto;
import io.swagger.client.model.RichiestaPagaDebitoPOSDto;
import io.swagger.client.model.RispostaInfoAvvisoPagamentoPerIdPosDto;
import io.swagger.client.model.RispostaListaTerminaliPOSDto;
import io.swagger.client.model.RispostaPagaDebitiDto;
import io.swagger.client.model.StandardAPIErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PosApi {
    private ApiClient apiClient;

    public PosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PosApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for postInfoPerIdPosUsingPOST
     * @param infoAvvisiPagamentoPerChiaveDebito infoAvvisiPagamentoPerChiaveDebito (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postInfoPerIdPosUsingPOSTCall(RichiestaInfoAvvisoPagamentoPerIdPosDto infoAvvisiPagamentoPerChiaveDebito, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = infoAvvisiPagamentoPerChiaveDebito;

        // create path and map variables
        String localVarPath = "/rest/pos/v1/infoAvvisoPagamento";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postInfoPerIdPosUsingPOSTValidateBeforeCall(RichiestaInfoAvvisoPagamentoPerIdPosDto infoAvvisiPagamentoPerChiaveDebito, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'infoAvvisiPagamentoPerChiaveDebito' is set
        if (infoAvvisiPagamentoPerChiaveDebito == null) {
            throw new ApiException("Missing the required parameter 'infoAvvisiPagamentoPerChiaveDebito' when calling postInfoPerIdPosUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = postInfoPerIdPosUsingPOSTCall(infoAvvisiPagamentoPerChiaveDebito, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Servizio che restituisce il dettaglio del debito tramite chiave debito ridotta
     * 
     * @param infoAvvisiPagamentoPerChiaveDebito infoAvvisiPagamentoPerChiaveDebito (required)
     * @return RispostaInfoAvvisoPagamentoPerIdPosDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaInfoAvvisoPagamentoPerIdPosDto postInfoPerIdPosUsingPOST(RichiestaInfoAvvisoPagamentoPerIdPosDto infoAvvisiPagamentoPerChiaveDebito) throws ApiException {
        ApiResponse<RispostaInfoAvvisoPagamentoPerIdPosDto> resp = postInfoPerIdPosUsingPOSTWithHttpInfo(infoAvvisiPagamentoPerChiaveDebito);
        return resp.getData();
    }

    /**
     * Servizio che restituisce il dettaglio del debito tramite chiave debito ridotta
     * 
     * @param infoAvvisiPagamentoPerChiaveDebito infoAvvisiPagamentoPerChiaveDebito (required)
     * @return ApiResponse&lt;RispostaInfoAvvisoPagamentoPerIdPosDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaInfoAvvisoPagamentoPerIdPosDto> postInfoPerIdPosUsingPOSTWithHttpInfo(RichiestaInfoAvvisoPagamentoPerIdPosDto infoAvvisiPagamentoPerChiaveDebito) throws ApiException {
        com.squareup.okhttp.Call call = postInfoPerIdPosUsingPOSTValidateBeforeCall(infoAvvisiPagamentoPerChiaveDebito, null, null);
        Type localVarReturnType = new TypeToken<RispostaInfoAvvisoPagamentoPerIdPosDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Servizio che restituisce il dettaglio del debito tramite chiave debito ridotta (asynchronously)
     * 
     * @param infoAvvisiPagamentoPerChiaveDebito infoAvvisiPagamentoPerChiaveDebito (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postInfoPerIdPosUsingPOSTAsync(RichiestaInfoAvvisoPagamentoPerIdPosDto infoAvvisiPagamentoPerChiaveDebito, final ApiCallback<RispostaInfoAvvisoPagamentoPerIdPosDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postInfoPerIdPosUsingPOSTValidateBeforeCall(infoAvvisiPagamentoPerChiaveDebito, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaInfoAvvisoPagamentoPerIdPosDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postInfoPerIdPosUsingPOST1
     * @param richiesta richiesta (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postInfoPerIdPosUsingPOST1Call(RichiestaListaTerminaliPOSDto richiesta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = richiesta;

        // create path and map variables
        String localVarPath = "/rest/pos/v1/infoListaTerminali";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postInfoPerIdPosUsingPOST1ValidateBeforeCall(RichiestaListaTerminaliPOSDto richiesta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'richiesta' is set
        if (richiesta == null) {
            throw new ApiException("Missing the required parameter 'richiesta' when calling postInfoPerIdPosUsingPOST1(Async)");
        }
        

        com.squareup.okhttp.Call call = postInfoPerIdPosUsingPOST1Call(richiesta, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Si occupa di restituire l&#39;elenco dei terminali POS censiti per un dato ente. Attualmente sono gestiti solo il Pos “Nexi” e Pos di “Progetti e Soluzioni”. Sono gestite due tipi di chiamate differenti, una chiamata con filtro contesto e una chiamata senza filtri.
     * 
     * @param richiesta richiesta (required)
     * @return RispostaListaTerminaliPOSDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaListaTerminaliPOSDto postInfoPerIdPosUsingPOST1(RichiestaListaTerminaliPOSDto richiesta) throws ApiException {
        ApiResponse<RispostaListaTerminaliPOSDto> resp = postInfoPerIdPosUsingPOST1WithHttpInfo(richiesta);
        return resp.getData();
    }

    /**
     * Si occupa di restituire l&#39;elenco dei terminali POS censiti per un dato ente. Attualmente sono gestiti solo il Pos “Nexi” e Pos di “Progetti e Soluzioni”. Sono gestite due tipi di chiamate differenti, una chiamata con filtro contesto e una chiamata senza filtri.
     * 
     * @param richiesta richiesta (required)
     * @return ApiResponse&lt;RispostaListaTerminaliPOSDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaListaTerminaliPOSDto> postInfoPerIdPosUsingPOST1WithHttpInfo(RichiestaListaTerminaliPOSDto richiesta) throws ApiException {
        com.squareup.okhttp.Call call = postInfoPerIdPosUsingPOST1ValidateBeforeCall(richiesta, null, null);
        Type localVarReturnType = new TypeToken<RispostaListaTerminaliPOSDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Si occupa di restituire l&#39;elenco dei terminali POS censiti per un dato ente. Attualmente sono gestiti solo il Pos “Nexi” e Pos di “Progetti e Soluzioni”. Sono gestite due tipi di chiamate differenti, una chiamata con filtro contesto e una chiamata senza filtri. (asynchronously)
     * 
     * @param richiesta richiesta (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postInfoPerIdPosUsingPOST1Async(RichiestaListaTerminaliPOSDto richiesta, final ApiCallback<RispostaListaTerminaliPOSDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postInfoPerIdPosUsingPOST1ValidateBeforeCall(richiesta, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaListaTerminaliPOSDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPagaPosUsingPOST
     * @param richiestaPagaDebitiDto richiestaPagaDebitiDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPagaPosUsingPOSTCall(RichiestaPagaDebitoPOSDto richiestaPagaDebitiDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = richiestaPagaDebitiDto;

        // create path and map variables
        String localVarPath = "/rest/pos/v1/pagaDebito";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPagaPosUsingPOSTValidateBeforeCall(RichiestaPagaDebitoPOSDto richiestaPagaDebitiDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'richiestaPagaDebitiDto' is set
        if (richiestaPagaDebitiDto == null) {
            throw new ApiException("Missing the required parameter 'richiestaPagaDebitiDto' when calling postPagaPosUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = postPagaPosUsingPOSTCall(richiestaPagaDebitiDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Servizio che gestisce la richiesta di pagamento di un carrello di debiti e restituisce l&#39;identificativo della transazione che è stata creata ed un URL
     * Il servizio creerà il/i debito/i, creerà una transazione e restituirà un identTransazione e un URL. Il client invocando tale URL concluderà la procedura di pagamento (modello 1) del carrello debiti prima sottomesso.
     * @param richiestaPagaDebitiDto richiestaPagaDebitiDto (required)
     * @return RispostaPagaDebitiDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaPagaDebitiDto postPagaPosUsingPOST(RichiestaPagaDebitoPOSDto richiestaPagaDebitiDto) throws ApiException {
        ApiResponse<RispostaPagaDebitiDto> resp = postPagaPosUsingPOSTWithHttpInfo(richiestaPagaDebitiDto);
        return resp.getData();
    }

    /**
     * Servizio che gestisce la richiesta di pagamento di un carrello di debiti e restituisce l&#39;identificativo della transazione che è stata creata ed un URL
     * Il servizio creerà il/i debito/i, creerà una transazione e restituirà un identTransazione e un URL. Il client invocando tale URL concluderà la procedura di pagamento (modello 1) del carrello debiti prima sottomesso.
     * @param richiestaPagaDebitiDto richiestaPagaDebitiDto (required)
     * @return ApiResponse&lt;RispostaPagaDebitiDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaPagaDebitiDto> postPagaPosUsingPOSTWithHttpInfo(RichiestaPagaDebitoPOSDto richiestaPagaDebitiDto) throws ApiException {
        com.squareup.okhttp.Call call = postPagaPosUsingPOSTValidateBeforeCall(richiestaPagaDebitiDto, null, null);
        Type localVarReturnType = new TypeToken<RispostaPagaDebitiDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Servizio che gestisce la richiesta di pagamento di un carrello di debiti e restituisce l&#39;identificativo della transazione che è stata creata ed un URL (asynchronously)
     * Il servizio creerà il/i debito/i, creerà una transazione e restituirà un identTransazione e un URL. Il client invocando tale URL concluderà la procedura di pagamento (modello 1) del carrello debiti prima sottomesso.
     * @param richiestaPagaDebitiDto richiestaPagaDebitiDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPagaPosUsingPOSTAsync(RichiestaPagaDebitoPOSDto richiestaPagaDebitiDto, final ApiCallback<RispostaPagaDebitiDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPagaPosUsingPOSTValidateBeforeCall(richiestaPagaDebitiDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaPagaDebitiDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
