/*
 * API Gateway Pagamenti
 * Set API REST PagoPA
 *
 * OpenAPI spec version: 1.0
 * Contact: pagamenti.produzione@maggioli.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.RichiestaCheckoutDto;
import io.swagger.client.model.RichiestaInfoListaScartiCaricamentoDebitiPdpDto;
import io.swagger.client.model.RichiestaModificaAnnoCompetenzaDto;
import io.swagger.client.model.RichiestaModificaDettagliImportoDto;
import io.swagger.client.model.RichiestaModificaGruppoDebitiDto;
import io.swagger.client.model.RichiestaPagaDebitiDto;
import io.swagger.client.model.RispostaInfoListaScartiCaricamentoDebitiPdpDto;
import io.swagger.client.model.RispostaModificaAnnoCompetenzaDto;
import io.swagger.client.model.RispostaModificaDettagliImportoDto;
import io.swagger.client.model.RispostaModificaGruppoDebitiDto;
import io.swagger.client.model.RispostaPagaDebitiDto;
import io.swagger.client.model.StandardAPIErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DebitiApi {
    private ApiClient apiClient;

    public DebitiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DebitiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for patchModificaAnnoCompetenzaUsingPATCH
     * @param richiestaPagaDebitiDto richiestaPagaDebitiDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchModificaAnnoCompetenzaUsingPATCHCall(RichiestaModificaAnnoCompetenzaDto richiestaPagaDebitiDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = richiestaPagaDebitiDto;

        // create path and map variables
        String localVarPath = "/rest/debiti/v1/modificaAnnoCompetenza";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchModificaAnnoCompetenzaUsingPATCHValidateBeforeCall(RichiestaModificaAnnoCompetenzaDto richiestaPagaDebitiDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'richiestaPagaDebitiDto' is set
        if (richiestaPagaDebitiDto == null) {
            throw new ApiException("Missing the required parameter 'richiestaPagaDebitiDto' when calling patchModificaAnnoCompetenzaUsingPATCH(Async)");
        }
        

        com.squareup.okhttp.Call call = patchModificaAnnoCompetenzaUsingPATCHCall(richiestaPagaDebitiDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Permette di modificare l&#39;anno di competenza per TUTTI i dettagli del debito (&lt;b&gt;anche per debiti già pagati&lt;/b&gt;). Serve per aggiornare in particolare i dati contabili
     * 
     * @param richiestaPagaDebitiDto richiestaPagaDebitiDto (required)
     * @return RispostaModificaAnnoCompetenzaDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaModificaAnnoCompetenzaDto patchModificaAnnoCompetenzaUsingPATCH(RichiestaModificaAnnoCompetenzaDto richiestaPagaDebitiDto) throws ApiException {
        ApiResponse<RispostaModificaAnnoCompetenzaDto> resp = patchModificaAnnoCompetenzaUsingPATCHWithHttpInfo(richiestaPagaDebitiDto);
        return resp.getData();
    }

    /**
     * Permette di modificare l&#39;anno di competenza per TUTTI i dettagli del debito (&lt;b&gt;anche per debiti già pagati&lt;/b&gt;). Serve per aggiornare in particolare i dati contabili
     * 
     * @param richiestaPagaDebitiDto richiestaPagaDebitiDto (required)
     * @return ApiResponse&lt;RispostaModificaAnnoCompetenzaDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaModificaAnnoCompetenzaDto> patchModificaAnnoCompetenzaUsingPATCHWithHttpInfo(RichiestaModificaAnnoCompetenzaDto richiestaPagaDebitiDto) throws ApiException {
        com.squareup.okhttp.Call call = patchModificaAnnoCompetenzaUsingPATCHValidateBeforeCall(richiestaPagaDebitiDto, null, null);
        Type localVarReturnType = new TypeToken<RispostaModificaAnnoCompetenzaDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Permette di modificare l&#39;anno di competenza per TUTTI i dettagli del debito (&lt;b&gt;anche per debiti già pagati&lt;/b&gt;). Serve per aggiornare in particolare i dati contabili (asynchronously)
     * 
     * @param richiestaPagaDebitiDto richiestaPagaDebitiDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchModificaAnnoCompetenzaUsingPATCHAsync(RichiestaModificaAnnoCompetenzaDto richiestaPagaDebitiDto, final ApiCallback<RispostaModificaAnnoCompetenzaDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchModificaAnnoCompetenzaUsingPATCHValidateBeforeCall(richiestaPagaDebitiDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaModificaAnnoCompetenzaDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchModificaDettagliImportoUsingPATCH
     * @param richiestaPagaDebitiDto richiestaPagaDebitiDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchModificaDettagliImportoUsingPATCHCall(RichiestaModificaDettagliImportoDto richiestaPagaDebitiDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = richiestaPagaDebitiDto;

        // create path and map variables
        String localVarPath = "/rest/debiti/v1/modificaDettagliImporto";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchModificaDettagliImportoUsingPATCHValidateBeforeCall(RichiestaModificaDettagliImportoDto richiestaPagaDebitiDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'richiestaPagaDebitiDto' is set
        if (richiestaPagaDebitiDto == null) {
            throw new ApiException("Missing the required parameter 'richiestaPagaDebitiDto' when calling patchModificaDettagliImportoUsingPATCH(Async)");
        }
        

        com.squareup.okhttp.Call call = patchModificaDettagliImportoUsingPATCHCall(richiestaPagaDebitiDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Permette di modificare i dettagli amministrativi del debito
     * 
     * @param richiestaPagaDebitiDto richiestaPagaDebitiDto (required)
     * @return RispostaModificaDettagliImportoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaModificaDettagliImportoDto patchModificaDettagliImportoUsingPATCH(RichiestaModificaDettagliImportoDto richiestaPagaDebitiDto) throws ApiException {
        ApiResponse<RispostaModificaDettagliImportoDto> resp = patchModificaDettagliImportoUsingPATCHWithHttpInfo(richiestaPagaDebitiDto);
        return resp.getData();
    }

    /**
     * Permette di modificare i dettagli amministrativi del debito
     * 
     * @param richiestaPagaDebitiDto richiestaPagaDebitiDto (required)
     * @return ApiResponse&lt;RispostaModificaDettagliImportoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaModificaDettagliImportoDto> patchModificaDettagliImportoUsingPATCHWithHttpInfo(RichiestaModificaDettagliImportoDto richiestaPagaDebitiDto) throws ApiException {
        com.squareup.okhttp.Call call = patchModificaDettagliImportoUsingPATCHValidateBeforeCall(richiestaPagaDebitiDto, null, null);
        Type localVarReturnType = new TypeToken<RispostaModificaDettagliImportoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Permette di modificare i dettagli amministrativi del debito (asynchronously)
     * 
     * @param richiestaPagaDebitiDto richiestaPagaDebitiDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchModificaDettagliImportoUsingPATCHAsync(RichiestaModificaDettagliImportoDto richiestaPagaDebitiDto, final ApiCallback<RispostaModificaDettagliImportoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchModificaDettagliImportoUsingPATCHValidateBeforeCall(richiestaPagaDebitiDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaModificaDettagliImportoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postCheckoutUsingPOST
     * @param richiestaCheckoutDto richiestaCheckoutDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postCheckoutUsingPOSTCall(RichiestaCheckoutDto richiestaCheckoutDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = richiestaCheckoutDto;

        // create path and map variables
        String localVarPath = "/rest/debiti/v1/checkout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postCheckoutUsingPOSTValidateBeforeCall(RichiestaCheckoutDto richiestaCheckoutDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'richiestaCheckoutDto' is set
        if (richiestaCheckoutDto == null) {
            throw new ApiException("Missing the required parameter 'richiestaCheckoutDto' when calling postCheckoutUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = postCheckoutUsingPOSTCall(richiestaCheckoutDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Servizio che gestisce la richiesta di pagamento di un carrello di debiti e restituisce l&#39;identificativo della transazione che è stata creata ed un URL
     * Il servizio creerà il/i debito/i, creerà una transazione e restituirà un identTransazione e un URL. Il client invocando tale URL concluderà la procedura di pagamento (modello 1) del carrello debiti prima sottomesso.
     * @param richiestaCheckoutDto richiestaCheckoutDto (required)
     * @return RispostaPagaDebitiDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaPagaDebitiDto postCheckoutUsingPOST(RichiestaCheckoutDto richiestaCheckoutDto) throws ApiException {
        ApiResponse<RispostaPagaDebitiDto> resp = postCheckoutUsingPOSTWithHttpInfo(richiestaCheckoutDto);
        return resp.getData();
    }

    /**
     * Servizio che gestisce la richiesta di pagamento di un carrello di debiti e restituisce l&#39;identificativo della transazione che è stata creata ed un URL
     * Il servizio creerà il/i debito/i, creerà una transazione e restituirà un identTransazione e un URL. Il client invocando tale URL concluderà la procedura di pagamento (modello 1) del carrello debiti prima sottomesso.
     * @param richiestaCheckoutDto richiestaCheckoutDto (required)
     * @return ApiResponse&lt;RispostaPagaDebitiDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaPagaDebitiDto> postCheckoutUsingPOSTWithHttpInfo(RichiestaCheckoutDto richiestaCheckoutDto) throws ApiException {
        com.squareup.okhttp.Call call = postCheckoutUsingPOSTValidateBeforeCall(richiestaCheckoutDto, null, null);
        Type localVarReturnType = new TypeToken<RispostaPagaDebitiDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Servizio che gestisce la richiesta di pagamento di un carrello di debiti e restituisce l&#39;identificativo della transazione che è stata creata ed un URL (asynchronously)
     * Il servizio creerà il/i debito/i, creerà una transazione e restituirà un identTransazione e un URL. Il client invocando tale URL concluderà la procedura di pagamento (modello 1) del carrello debiti prima sottomesso.
     * @param richiestaCheckoutDto richiestaCheckoutDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postCheckoutUsingPOSTAsync(RichiestaCheckoutDto richiestaCheckoutDto, final ApiCallback<RispostaPagaDebitiDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postCheckoutUsingPOSTValidateBeforeCall(richiestaCheckoutDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaPagaDebitiDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postInfoListaScartiUsingPOST
     * @param richiestaInfoListaScarti richiestaInfoListaScarti (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postInfoListaScartiUsingPOSTCall(RichiestaInfoListaScartiCaricamentoDebitiPdpDto richiestaInfoListaScarti, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = richiestaInfoListaScarti;

        // create path and map variables
        String localVarPath = "/rest/debiti/v1/infoListaScarti";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postInfoListaScartiUsingPOSTValidateBeforeCall(RichiestaInfoListaScartiCaricamentoDebitiPdpDto richiestaInfoListaScarti, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'richiestaInfoListaScarti' is set
        if (richiestaInfoListaScarti == null) {
            throw new ApiException("Missing the required parameter 'richiestaInfoListaScarti' when calling postInfoListaScartiUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = postInfoListaScartiUsingPOSTCall(richiestaInfoListaScarti, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Servizio che restituisce la lista di pagamenti mod 3 scartati dal caricamento o dall’aggiornamento in un certo periodo di tempo
     * 
     * @param richiestaInfoListaScarti richiestaInfoListaScarti (required)
     * @return RispostaInfoListaScartiCaricamentoDebitiPdpDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaInfoListaScartiCaricamentoDebitiPdpDto postInfoListaScartiUsingPOST(RichiestaInfoListaScartiCaricamentoDebitiPdpDto richiestaInfoListaScarti) throws ApiException {
        ApiResponse<RispostaInfoListaScartiCaricamentoDebitiPdpDto> resp = postInfoListaScartiUsingPOSTWithHttpInfo(richiestaInfoListaScarti);
        return resp.getData();
    }

    /**
     * Servizio che restituisce la lista di pagamenti mod 3 scartati dal caricamento o dall’aggiornamento in un certo periodo di tempo
     * 
     * @param richiestaInfoListaScarti richiestaInfoListaScarti (required)
     * @return ApiResponse&lt;RispostaInfoListaScartiCaricamentoDebitiPdpDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaInfoListaScartiCaricamentoDebitiPdpDto> postInfoListaScartiUsingPOSTWithHttpInfo(RichiestaInfoListaScartiCaricamentoDebitiPdpDto richiestaInfoListaScarti) throws ApiException {
        com.squareup.okhttp.Call call = postInfoListaScartiUsingPOSTValidateBeforeCall(richiestaInfoListaScarti, null, null);
        Type localVarReturnType = new TypeToken<RispostaInfoListaScartiCaricamentoDebitiPdpDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Servizio che restituisce la lista di pagamenti mod 3 scartati dal caricamento o dall’aggiornamento in un certo periodo di tempo (asynchronously)
     * 
     * @param richiestaInfoListaScarti richiestaInfoListaScarti (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postInfoListaScartiUsingPOSTAsync(RichiestaInfoListaScartiCaricamentoDebitiPdpDto richiestaInfoListaScarti, final ApiCallback<RispostaInfoListaScartiCaricamentoDebitiPdpDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postInfoListaScartiUsingPOSTValidateBeforeCall(richiestaInfoListaScarti, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaInfoListaScartiCaricamentoDebitiPdpDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPagaUsingPATCH
     * @param richiestaModificaGruppoDebiti richiestaModificaGruppoDebiti (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPagaUsingPATCHCall(RichiestaModificaGruppoDebitiDto richiestaModificaGruppoDebiti, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = richiestaModificaGruppoDebiti;

        // create path and map variables
        String localVarPath = "/rest/debiti/v1/modificaGruppoDebiti";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPagaUsingPATCHValidateBeforeCall(RichiestaModificaGruppoDebitiDto richiestaModificaGruppoDebiti, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'richiestaModificaGruppoDebiti' is set
        if (richiestaModificaGruppoDebiti == null) {
            throw new ApiException("Missing the required parameter 'richiestaModificaGruppoDebiti' when calling postPagaUsingPATCH(Async)");
        }
        

        com.squareup.okhttp.Call call = postPagaUsingPATCHCall(richiestaModificaGruppoDebiti, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Servizio che permette di modificare il campo gruppodeb di una lista di debiti mod 3
     * 
     * @param richiestaModificaGruppoDebiti richiestaModificaGruppoDebiti (required)
     * @return RispostaModificaGruppoDebitiDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaModificaGruppoDebitiDto postPagaUsingPATCH(RichiestaModificaGruppoDebitiDto richiestaModificaGruppoDebiti) throws ApiException {
        ApiResponse<RispostaModificaGruppoDebitiDto> resp = postPagaUsingPATCHWithHttpInfo(richiestaModificaGruppoDebiti);
        return resp.getData();
    }

    /**
     * Servizio che permette di modificare il campo gruppodeb di una lista di debiti mod 3
     * 
     * @param richiestaModificaGruppoDebiti richiestaModificaGruppoDebiti (required)
     * @return ApiResponse&lt;RispostaModificaGruppoDebitiDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaModificaGruppoDebitiDto> postPagaUsingPATCHWithHttpInfo(RichiestaModificaGruppoDebitiDto richiestaModificaGruppoDebiti) throws ApiException {
        com.squareup.okhttp.Call call = postPagaUsingPATCHValidateBeforeCall(richiestaModificaGruppoDebiti, null, null);
        Type localVarReturnType = new TypeToken<RispostaModificaGruppoDebitiDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Servizio che permette di modificare il campo gruppodeb di una lista di debiti mod 3 (asynchronously)
     * 
     * @param richiestaModificaGruppoDebiti richiestaModificaGruppoDebiti (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPagaUsingPATCHAsync(RichiestaModificaGruppoDebitiDto richiestaModificaGruppoDebiti, final ApiCallback<RispostaModificaGruppoDebitiDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPagaUsingPATCHValidateBeforeCall(richiestaModificaGruppoDebiti, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaModificaGruppoDebitiDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPagaUsingPOST
     * @param richiestaPagaDebitiDto richiestaPagaDebitiDto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPagaUsingPOSTCall(RichiestaPagaDebitiDto richiestaPagaDebitiDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = richiestaPagaDebitiDto;

        // create path and map variables
        String localVarPath = "/rest/debiti/v1/paga";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPagaUsingPOSTValidateBeforeCall(RichiestaPagaDebitiDto richiestaPagaDebitiDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'richiestaPagaDebitiDto' is set
        if (richiestaPagaDebitiDto == null) {
            throw new ApiException("Missing the required parameter 'richiestaPagaDebitiDto' when calling postPagaUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = postPagaUsingPOSTCall(richiestaPagaDebitiDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Servizio che gestisce la richiesta di pagamento di un carrello di debiti e restituisce l&#39;identificativo della transazione che è stata creata ed un URL
     * Il servizio creerà il/i debito/i, creerà una transazione e restituirà un identTransazione e un URL. Il client invocando tale URL concluderà la procedura di pagamento (modello 1) del carrello debiti prima sottomesso.
     * @param richiestaPagaDebitiDto richiestaPagaDebitiDto (required)
     * @return RispostaPagaDebitiDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RispostaPagaDebitiDto postPagaUsingPOST(RichiestaPagaDebitiDto richiestaPagaDebitiDto) throws ApiException {
        ApiResponse<RispostaPagaDebitiDto> resp = postPagaUsingPOSTWithHttpInfo(richiestaPagaDebitiDto);
        return resp.getData();
    }

    /**
     * Servizio che gestisce la richiesta di pagamento di un carrello di debiti e restituisce l&#39;identificativo della transazione che è stata creata ed un URL
     * Il servizio creerà il/i debito/i, creerà una transazione e restituirà un identTransazione e un URL. Il client invocando tale URL concluderà la procedura di pagamento (modello 1) del carrello debiti prima sottomesso.
     * @param richiestaPagaDebitiDto richiestaPagaDebitiDto (required)
     * @return ApiResponse&lt;RispostaPagaDebitiDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RispostaPagaDebitiDto> postPagaUsingPOSTWithHttpInfo(RichiestaPagaDebitiDto richiestaPagaDebitiDto) throws ApiException {
        com.squareup.okhttp.Call call = postPagaUsingPOSTValidateBeforeCall(richiestaPagaDebitiDto, null, null);
        Type localVarReturnType = new TypeToken<RispostaPagaDebitiDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Servizio che gestisce la richiesta di pagamento di un carrello di debiti e restituisce l&#39;identificativo della transazione che è stata creata ed un URL (asynchronously)
     * Il servizio creerà il/i debito/i, creerà una transazione e restituirà un identTransazione e un URL. Il client invocando tale URL concluderà la procedura di pagamento (modello 1) del carrello debiti prima sottomesso.
     * @param richiestaPagaDebitiDto richiestaPagaDebitiDto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPagaUsingPOSTAsync(RichiestaPagaDebitiDto richiestaPagaDebitiDto, final ApiCallback<RispostaPagaDebitiDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPagaUsingPOSTValidateBeforeCall(richiestaPagaDebitiDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RispostaPagaDebitiDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
